/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuickTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/utilities.ts
var import_obsidian4 = require("obsidian");

// src/modal.ts
var import_obsidian = require("obsidian");
var QuickTagSelector = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, gatherer, fileList) {
    super(plugin.app);
    this.gatherer = gatherer;
    this.settings = plugin.settings;
    this.fileList = fileList;
    this.tag = "";
  }
  getItems() {
    if (!this.gatherer) {
      new import_obsidian.Notice("Error: Could not find tags!");
      return [];
    }
    var results = this.gatherer(this.settings, this.fileList);
    return results;
  }
  getItemText(tag) {
    return tag;
  }
  // this should be overwritten when called to hook into a promise's resolve
  async onChooseItem(tag) {
    this.tag = tag;
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app2, onSubmit, message) {
    super(app2);
    this.onSubmit = onSubmit;
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: this.message });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Yes").setCta().onClick(() => {
      this.close();
      this.onSubmit(true);
    })).addButton((btn) => btn.setButtonText("No").setCta().onClick(() => {
      this.close();
      this.onSubmit(false);
    }));
  }
  async onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/tag_gatherers.ts
var import_obsidian2 = require("obsidian");
function getTagList(settings, fileList) {
  var tagSettings = getStarredTags(settings, "cut_in_line");
  var tag_array = tagSettings.map((e) => e.replace("#", "")).filter((e) => e).map((e) => "#" + e);
  if (!settings.all_tags) {
    return tag_array;
  }
  var tag_cache = getTagsFromAppCache();
  tag_cache.sort();
  tag_cache.forEach((tag) => {
    if (tag_array.indexOf(tag) == -1) {
      tag_array.push(tag);
    }
  });
  return tag_array;
}
function getTagsOnFiles(settings, fileList) {
  var tag_array = [];
  fileList.forEach((f) => {
    var cache = this.app.metadataCache.getFileCache(f);
    var new_tags = (0, import_obsidian2.parseFrontMatterTags)(cache.frontmatter);
    if (new_tags) {
      new_tags.map((e) => e.replace("#", "")).filter((e) => e).map((e) => "#" + e);
      new_tags.forEach((item) => {
        !tag_array.includes(item) ? tag_array.push(item) : void 0;
      });
    }
  });
  tag_array.push("REMOVE ALL");
  return tag_array;
}
function getNonStarredTags(settings, fileList) {
  var tag_array = getTagsFromAppCache();
  var starredTags = getStarredTags(settings);
  starredTags.forEach((t) => tag_array.remove(t));
  tag_array.sort();
  return tag_array;
}
function getStarredTags(settings, filter_key) {
  var results = [];
  settings.priorityTags.forEach((t) => {
    if (filter_key) {
      t[filter_key] ? results.push(t.tag_value) : null;
    } else {
      results.push(t.tag_value);
    }
  });
  return results;
}
function getTagsFromAppCache() {
  var results = [];
  for (const key in app.metadataCache.getTags()) {
    results.push(key);
  }
  return results;
}

// src/file_filters.ts
var import_obsidian3 = require("obsidian");
var SPECIAL_COMMANDS = ["REMOVE ALL"];
function getFilteredWithTag(fileList, tag) {
  if (SPECIAL_COMMANDS.includes(tag)) {
    return fileList;
  }
  var resultList = fileList.filter((file) => filterTag(file, tag) == true);
  return resultList;
}
function getFilteredWithoutTag(fileList, tag) {
  if (SPECIAL_COMMANDS.includes(tag)) {
    return fileList;
  }
  var resultList = fileList.filter((file) => filterTag(file, tag) == false);
  return resultList;
}
function filterTag(thisFile, tag) {
  var cache = this.app.metadataCache.getFileCache(thisFile);
  var existing_tags = (0, import_obsidian3.parseFrontMatterTags)(cache.frontmatter);
  if (existing_tags == null ? void 0 : existing_tags.includes(tag)) {
    return true;
  } else {
    return false;
  }
}
function onlyTaggableFiles(fileList) {
  var resultList = fileList.filter((file) => (file.extension ? true : false) == true && file.extension == "md");
  return resultList;
}

// src/utilities.ts
var tag_key = "tags";
var tag_cleanup = ["tag", "Tag", "Tags"];
var WOAH_LOTS_OF_FILES = 100;
function _getActiveFile() {
  var thisFile = this.app.workspace.getActiveFile();
  if (thisFile instanceof import_obsidian4.TFile) {
    return [thisFile];
  } else {
    new import_obsidian4.Notice("No file open!");
    return [];
  }
}
async function _addTag(thisFile, tag) {
  await _cleanFile(thisFile);
  await this.app.fileManager.processFrontMatter(thisFile, (frontmatter) => {
    frontmatter = _collectExistingTags(frontmatter);
    frontmatter[tag_key].push(tag);
  });
}
async function _removeTag(thisFile, tag) {
  await _cleanFile(thisFile);
  var processor = (frontmatter) => {
    frontmatter = _collectExistingTags(frontmatter);
    var tags = frontmatter[tag_key];
    var indx = tags.indexOf(tag, 0);
    if (indx > -1) {
      tags.splice(indx, 1);
    }
  };
  if (tag == "REMOVE ALL") {
    processor = (frontmatter) => {
      frontmatter[tag_key] = [];
    };
  }
  await this.app.fileManager.processFrontMatter(thisFile, processor);
}
function _toggleTags(files, tag) {
  var tag = tag.replace("#", "");
  var tag_added = 0;
  var tag_removed = 0;
  for (var i = 0; i < files.length; i++) {
    var exists = filterTag(files[i], `#${tag}`);
    if (!exists) {
      _addTag(files[i], tag);
      tag_added++;
    } else {
      _removeTag(files[i], tag);
      tag_removed++;
    }
  }
  return [tag_added, tag_removed];
}
async function _addTagToMany(files, tag, plugin) {
  console.log("ADDING TAGS");
  await _apply_bulk_changes(files, tag, plugin, _addTag);
}
async function _removeTagFromMany(files, tag, plugin) {
  console.log("REMOVING TAGS");
  await _apply_bulk_changes(files, tag, plugin, _removeTag);
}
async function _apply_bulk_changes(files, tag, plugin, func) {
  var logger = plugin.addStatusBarItem();
  logger.createEl("span");
  var useStatusBar = false;
  if (files.length > WOAH_LOTS_OF_FILES) {
    new import_obsidian4.Notice("Processing " + files.length + " files... This might take a while. See status bar for progress.");
    useStatusBar = true;
  }
  for (var i = 0; i < files.length; i++) {
    if (useStatusBar) {
      logger.setText(`Processing ${tag}: ${i + 1}/${files.length}`);
    }
    await func(files[i], tag);
  }
  logger.remove();
}
async function _cleanFile(f) {
  let text = await this.app.vault.read(f);
  var modified = false;
  if (text[0] == "\n") {
    while (text[0] == "\n") {
      text = text.slice(1);
    }
    modified = true;
  }
  if (text.indexOf("---\n") == 0) {
    var matches = text.match(/---\s*\n?/g);
    if (matches[1] != "---\n" && matches[1] != "---") {
      text = text.replace(matches[1], "---\n");
      modified = true;
    }
  }
  if (modified) {
    console.log(`fixing up broken parts of ${f.basename}'s yaml...`);
    await this.app.vault.modify(f, text);
  }
}
function _collectExistingTags(yml) {
  if (!yml.hasOwnProperty(tag_key)) {
    yml[tag_key] = [];
  } else {
    yml[tag_key] = _conformToArray(yml[tag_key]);
  }
  var alternate_keys = tag_cleanup.filter((v) => Object.keys(yml).includes(v));
  for (var i = 0; i < alternate_keys.length; i++) {
    var otherTags = _conformToArray(yml[alternate_keys[i]]);
    otherTags.forEach((tag) => {
      !yml[tag_key].includes(tag) ? yml[tag_key].push(tag) : console.log(tag + " already exists");
    });
    delete yml[alternate_keys[i]];
  }
  return yml;
}
function _conformToArray(input) {
  var output = typeof input === "string" ? input.split(",").map((e) => e.trim()) : input;
  if (output.length == 1) {
    output = output[0].split(" ").map((e) => e.trim());
  }
  return output ? output : [];
}
async function selectTag(plugin, gatherer, notes) {
  return new Promise((resolve) => {
    const modal = new QuickTagSelector(plugin, gatherer, notes ? notes : []);
    modal.onChooseItem = (tag) => {
      resolve(tag);
    };
    modal.open();
  });
}
function confirmationNotification(mode, tag, applicableFiles) {
  var notes = applicableFiles.length > 1 ? applicableFiles.length + " notes" : applicableFiles[0].basename;
  var tofrom = mode == "add" ? " added to " : " removed from ";
  if (tag == "REMOVE ALL") {
    new import_obsidian4.Notice("All tags removed from " + notes);
  } else {
    new import_obsidian4.Notice(tag + tofrom + notes);
  }
}
function dynamicToggleCommand(app2, plugin, StarredTag) {
  var tag = StarredTag.tag_value.replace("#", "");
  var commandId = `quick-add-tag:${tag}`;
  var fullId = `obsidian-quick-tagger:${commandId}`;
  var state = false;
  if (app2.commands.findCommand(fullId)) {
    delete app2.commands.commands[fullId];
    delete app2.commands.editorCommands[fullId];
  } else {
    plugin.addCommand({
      id: commandId,
      name: `Toggle #${tag}`,
      callback: () => {
        toggleTagOnActive(tag);
      }
    });
    state = true;
  }
  return state;
}
function dynamicAddMenuItems(menu, files, plugin) {
  var starredTags = plugin.settings.priorityTags;
  starredTags.forEach((t) => {
    if (t.right_click) {
      menu.addItem((item) => {
        item.setTitle(`Tag with ${t.tag_value}`).setIcon("tag").onClick(async () => {
          addTagsDirectly(plugin, files, t.tag_value);
        });
      });
    }
  });
}
async function addDialogs(mode, tag, quantity) {
  var verb = mode;
  var tofrom = mode == "add" ? " to " : " from ";
  var confirm = true;
  if (tag == "REMOVE ALL") {
    var msg = "This will delete all tags on the current note(s), are you sure?";
    await new Promise((resolve) => {
      new ConfirmModal(app, (result) => resolve(confirm = result), msg).open();
    });
    verb = "";
  }
  if (!confirm) {
    return confirm;
  }
  if (quantity && quantity > 1) {
    var msg = "You are about to " + verb + " " + tag + tofrom + quantity + " notes, are you sure?";
    await new Promise((resolve) => {
      new ConfirmModal(app, (result) => resolve(confirm = result), msg).open();
    });
  }
  return confirm;
}
async function addTagsWithModal(plugin, files) {
  var tag = await selectTag(plugin, getTagList, files);
  addTagsDirectly(plugin, files, tag);
}
async function addTagWithModal(plugin) {
  var currentFile = _getActiveFile();
  addTagsWithModal(plugin, currentFile);
}
async function removeTagsWithModal(plugin, files) {
  var tag = await selectTag(plugin, getTagsOnFiles, files);
  removeTagsDirectly(plugin, files, tag);
}
async function removeTagWithModal(plugin) {
  var currentFile = _getActiveFile();
  removeTagsWithModal(plugin, currentFile);
}
function toggleTagOnActive(tag) {
  var file = _getActiveFile();
  var tag_added = _toggleTags(file, tag);
  tag_added[0] ? confirmationNotification("add", tag, file) : confirmationNotification("remove", tag, file);
}
async function addTagsDirectly(plugin, files, tag) {
  var applicableFiles = getFilteredWithoutTag(files, tag);
  if (applicableFiles.length == 0) {
    new import_obsidian4.Notice("No file tags to change!");
    return;
  }
  var confirm = await addDialogs("add", tag, applicableFiles.length);
  if (confirm || applicableFiles.length == 1) {
    await _addTagToMany(applicableFiles, tag.replace("#", ""), plugin).then(
      () => confirmationNotification("add", tag, applicableFiles)
    );
  }
}
async function removeTagsDirectly(plugin, files, tag) {
  var applicableFiles = getFilteredWithTag(files, tag);
  if (applicableFiles.length == 0) {
    new import_obsidian4.Notice("No file tags to change!");
    return;
  }
  var confirm = await addDialogs("remove", tag, applicableFiles.length);
  if (confirm || applicableFiles.length == 1) {
    await _removeTagFromMany(applicableFiles, tag.replace("#", ""), plugin).then(
      () => confirmationNotification("remove", tag, applicableFiles)
    );
  }
}

// src/main.ts
var DEFAULT_SETTINGS = {
  all_tags: true,
  priorityTags: []
};
var QuickTagPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    var starredTags = this.settings.priorityTags;
    starredTags.forEach((t) => {
      if (t.add_command) {
        dynamicToggleCommand(app, this, t);
      }
    });
    this._statusBarItem = new Array();
    this.redrawButtons();
    const addTagRibbonIcon = this.addRibbonIcon("tag", "Add Tag to Current Note", async (evt) => {
      addTagWithModal(this);
    });
    const removeTagRibbonIcon = this.addRibbonIcon("x-square", "Remove Tag from Current Note", (evt) => {
      removeTagWithModal(this);
    });
    this.addCommand({
      id: "quick-add-tag",
      name: "Add Tag",
      callback: () => {
        addTagWithModal(this);
      }
    });
    this.addCommand({
      id: "open-quick-tagger",
      name: "Remove Tag",
      callback: () => {
        removeTagWithModal(this);
      }
    });
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        files = onlyTaggableFiles(files);
        if (files.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Tag " + files.length + " files with...").setIcon("tag").onClick(() => {
            addTagsWithModal(this, files);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        if (files.length < 1) {
          return;
        }
        dynamicAddMenuItems(menu, files, this);
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        files = onlyTaggableFiles(files);
        if (files.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Remove Tag from " + files.length + " files...").setIcon("tag").onClick(() => {
            removeTagsWithModal(this, files);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        var thisFile = onlyTaggableFiles([file]);
        if (thisFile.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Tag file with...").setIcon("tag").onClick(() => {
            addTagsWithModal(this, thisFile);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        var thisFile = onlyTaggableFiles([file]);
        if (thisFile.length < 1) {
          return;
        }
        dynamicAddMenuItems(menu, thisFile, this);
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        var thisFile = onlyTaggableFiles([file]);
        if (thisFile.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Remove Tag(s)...").setIcon("tag").onClick(() => {
            removeTagsWithModal(this, thisFile);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("search:results-menu", (menu, leaf) => {
        var files = [];
        leaf.dom.vChildren.children.forEach((e) => files.push(e.file));
        files = onlyTaggableFiles(files);
        if (files.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Add Tags to " + files.length + " notes...").setIcon("tag").onClick(() => {
            addTagsWithModal(this, files);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("search:results-menu", (menu, leaf) => {
        var files = [];
        leaf.dom.vChildren.children.forEach((e) => files.push(e.file));
        files = onlyTaggableFiles(files);
        if (files.length < 1) {
          return;
        }
        dynamicAddMenuItems(menu, files, this);
      })
    );
    this.registerEvent(
      this.app.workspace.on("search:results-menu", (menu, leaf) => {
        var files = [];
        leaf.dom.vChildren.children.forEach((e) => files.push(e.file));
        files = onlyTaggableFiles(files);
        if (files.length < 1) {
          return;
        }
        menu.addItem((item) => {
          item.setTitle("Remove Tags from " + files.length + " notes...").setIcon("tag").onClick(() => {
            removeTagsWithModal(this, files);
          });
        });
      })
    );
    this.addSettingTab(new QuickTagSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  redrawButtons() {
    if (this._statusBarItem) {
      this._statusBarItem.forEach((t) => t.remove());
    }
    var starredTags = this.settings.priorityTags;
    starredTags.forEach(
      (t) => {
        if (t.status_bar) {
          var item_to_add = this.addStatusBarItem();
          this._statusBarItem.push(item_to_add);
          item_to_add.classList.add("mod-clickable");
          item_to_add.setText(t.tag_value);
          item_to_add.setAttribute("aria-label", `Toggle #${t.tag_value} on active note`);
          item_to_add.setAttribute("aria-label-position", "top");
          item_to_add.addEventListener("click", async () => {
            toggleTagOnActive(t.tag_value);
          });
        }
      }
    );
  }
};
var QuickTagSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    this.app = app2;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quick Tagger Settings" });
    new import_obsidian5.Setting(containerEl).setName("Use All Tags").setDesc("If disabled, only Starred Tags will be shown in the tag selection dialog.").addToggle((toggle) => toggle.setValue(this.plugin.settings.all_tags).onChange(async (value) => {
      this.plugin.settings.all_tags = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h1", { text: "Starred Tags" });
    containerEl.createEl("h2", "hello");
    const starredDiv = containerEl.createDiv();
    this.drawPriorityTags(starredDiv);
    new import_obsidian5.Setting(containerEl).addButton((btn) => btn.setTooltip("Add a starred tag").onClick(async () => {
      let thisTag = await selectTag(this.plugin, getNonStarredTags);
      console.log("SETTING FUNCTION");
      this.plugin.settings.priorityTags.push({
        tag_value: thisTag,
        cut_in_line: true,
        add_command: false,
        status_bar: false,
        right_click: false
      });
      await this.plugin.saveSettings();
      this.drawPriorityTags(starredDiv);
    }).setIcon("plus"));
  }
  drawPriorityTags(div) {
    div.empty();
    const priorityTags = this.plugin.settings.priorityTags;
    new import_obsidian5.Setting(div).addButton((btn) => {
      btn.setIcon("star");
      var msg = "The first toggle on a starred tag moves it to the top of the list when selecting a tag for your notes.";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("chevron-right-square");
      var msg = "The second toggle on a starred tag adds a command for it so you can create a hotkey, etc.  --- NOT IMPLEMENTED";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("martini");
      var msg = "The third toggle on a starred tag adds a button for it to the status bar.  --- NOT IMPLEMENTED";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("mouse-pointer-click");
      var msg = "The fourth toggle on a starred tag adds it to the context menu.  --- NOT IMPLEMENTED";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("up-arrow-with-tail");
      var msg = "The up arrow button moves the starred tag up on the starred tag list. This affects the order it's displayed in the tag selection dialog.";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("down-arrow-with-tail");
      var msg = "The down arrow button moves the starred tag down on the starred tag list. This affects the order it's displayed in the tag selection dialog.";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).addButton((btn) => {
      btn.setIcon("trash");
      var msg = "The trash can button removes the starred tag from the starred list.";
      btn.onClick(() => new import_obsidian5.Notice(msg, 6e3));
      btn.setTooltip(msg);
    }).nameEl.setText("Starred tags get special treatment. Click or hover over these buttons for more details \u{1F449}");
    priorityTags.forEach((tag, i) => {
      const s = new import_obsidian5.Setting(div).addToggle((toggle) => {
        toggle.setValue(tag.cut_in_line).onChange(async (value) => {
          tag.cut_in_line = value;
          await this.plugin.saveSettings();
          new import_obsidian5.Notice(tag.cut_in_line ? `Added ${tag.tag_value} to priority section of selector dialog` : `Removed ${tag.tag_value} from priority section of selector dialog`);
        });
        toggle.setTooltip("Show first in tag selection dialog");
      }).addToggle((toggle) => {
        toggle.setValue(tag.add_command).onChange(async (value) => {
          tag.add_command = value;
          await this.plugin.saveSettings();
          dynamicToggleCommand(this.app, this.plugin, tag);
          new import_obsidian5.Notice(tag.add_command ? `Added ${tag.tag_value} command` : `Removed ${tag.tag_value} command`);
        });
        toggle.setTooltip("Add command for this tag");
      }).addToggle((toggle) => {
        toggle.setValue(tag.status_bar).onChange(async (value) => {
          tag.status_bar = value;
          await this.plugin.saveSettings();
          new import_obsidian5.Notice(tag.status_bar ? `Added ${tag.tag_value} button to status bar` : `Removed ${tag.tag_value} button from status bar`);
          this.plugin.redrawButtons();
        });
        toggle.setTooltip("Add button to status bar");
      }).addToggle((toggle) => {
        toggle.setValue(tag.right_click).onChange(async (value) => {
          tag.right_click = value;
          await this.plugin.saveSettings();
          new import_obsidian5.Notice(tag.right_click ? `Added ${tag.tag_value} to right-click menu` : `Removed ${tag.tag_value} from right-click menu`);
        });
        toggle.setTooltip("Add context menu entry");
      }).addButton((button) => {
        button.onClick(async () => {
          const oldTag = priorityTags[i - 1];
          priorityTags[i - 1] = tag;
          priorityTags[i] = oldTag;
          this.drawPriorityTags(div);
          await this.plugin.saveSettings();
          this.plugin.redrawButtons();
        });
        button.setIcon("up-arrow-with-tail");
        button.setTooltip("Move Starred Tag up");
        if (i === 0) {
          button.setDisabled(true);
        }
      }).addButton((button) => {
        button.onClick(async () => {
          const oldTag = priorityTags[i + 1];
          priorityTags[i + 1] = tag;
          priorityTags[i] = oldTag;
          this.drawPriorityTags(div);
          await this.plugin.saveSettings();
          this.plugin.redrawButtons();
        });
        button.setIcon("down-arrow-with-tail");
        button.setTooltip("Move Starred Tag down");
        if (i === priorityTags.length - 1) {
          button.setDisabled(true);
        }
      }).addButton((btn) => {
        btn.onClick(async () => {
          priorityTags.remove(tag);
          await this.plugin.saveSettings();
          this.drawPriorityTags(div);
        });
        btn.setIcon("trash");
        btn.setTooltip("Remove this Tag");
      });
      s.nameEl.innerHTML = tag.tag_value;
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
